import { ReactChild, ReactChildren } from "react"

// Next
import Head from "next/head"
import Link from 'next/link'
import Image from "next/image"

// Utils
import { AiOutlineArrowLeft } from "react-icons/ai"
// import { IoMdClose } from "react-icons/io"
import { boulder } from "styles/colors"
import getImageUrl from 'utils/getImageUrl'

// Components
import * as S from './StyledComponents'

// Redux
import { useDispatch } from "react-redux"
import { useAppSelector } from "components/hooks/reduxHooks"
import { previousStep } from "components/createBetPage/ducks"

interface PropsI {
  children: ReactChild | ReactChildren;
}

const CreateBetPageLayout = ({ children }: PropsI) => {
  const dispatch = useDispatch()
  const { category, step } = useAppSelector((state) => state.createBetReducer)

  let imageSrc
  if (category) {
    switch (category) {
      case 'Sports':
        imageSrc = '/mock/stadium.jpg'
        break;
      case 'eSPORTS':
        imageSrc = '/mock/eSports.jpg'
        break;
      case 'POLITICAL':
        imageSrc = '/mock/senate.jpg'
        break;
      case 'Entertainment':
        imageSrc = '/mock/concert.jpg'
        break;
      case 'Crypto projects':
        imageSrc = '/mock/bitcoin.jpg'
        break;
      case 'Others':
        imageSrc = '/mock/stadium.jpg'
        break;
      default:
        break;
    }
  }

  return (
    <S.Layout>
      <Head>
        <title>Create Bet</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <S.Main data-name="create-bet-page">
        {step && step > 1 &&
          <S.LeftButton onClick={() => dispatch(previousStep())}>
            <AiOutlineArrowLeft size={30} color={boulder} />
          </S.LeftButton>
        }
        {/* <S.Button>
          <Link href="/">
            <S.IconLink>
              <IoMdClose size={30} color={boulder} />
            </S.IconLink>
          </Link>
        </S.Button> */}
        {step && step > 1 && imageSrc &&
          <S.BackgroundImage>
            <S.ImageContainer>
              <Image
                src={getImageUrl(imageSrc, true)}
                alt='background-image'
                layout="fill"
                objectFit="cover"
                loading='lazy'
              />
            </S.ImageContainer>
          </S.BackgroundImage>
        }
        <S.Content>
          {children}
        </S.Content>
      </S.Main>
    </S.Layout>
  );
};

export default CreateBetPageLayout;
