/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  CommitmentBalanceTransferRejectionCauseWrapper,
  CommitmentBalanceTransferRejectionCauseWrapperInterface,
} from "../CommitmentBalanceTransferRejectionCauseWrapper";

const _abi = [
  {
    inputs: [],
    name: "TooLate",
    outputs: [
      {
        internalType: "enum CommitmentBalanceTransferRejectionCause",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "VirtualFloorUnresolvable",
    outputs: [
      {
        internalType: "enum CommitmentBalanceTransferRejectionCause",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WrongState",
    outputs: [
      {
        internalType: "enum CommitmentBalanceTransferRejectionCause",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060c78061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80635b5e37d1146041578063de4168ba14605c578063ecdd1c29146063575b600080fd5b6048600281565b60405160539190606a565b60405180910390f35b6048600081565b6048600181565b6020810160038310608b57634e487b7160e01b600052602160045260246000fd5b9190529056fea2646970667358221220850d0ebfd09e260104b761b6a4f98cbc6a5efaf06ea78abed7d860e44e8c86b564736f6c63430008090033";

type CommitmentBalanceTransferRejectionCauseWrapperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CommitmentBalanceTransferRejectionCauseWrapperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CommitmentBalanceTransferRejectionCauseWrapper__factory extends ContractFactory {
  constructor(
    ...args: CommitmentBalanceTransferRejectionCauseWrapperConstructorParams
  ) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "CommitmentBalanceTransferRejectionCauseWrapper";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CommitmentBalanceTransferRejectionCauseWrapper> {
    return super.deploy(
      overrides || {}
    ) as Promise<CommitmentBalanceTransferRejectionCauseWrapper>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): CommitmentBalanceTransferRejectionCauseWrapper {
    return super.attach(
      address
    ) as CommitmentBalanceTransferRejectionCauseWrapper;
  }
  connect(
    signer: Signer
  ): CommitmentBalanceTransferRejectionCauseWrapper__factory {
    return super.connect(
      signer
    ) as CommitmentBalanceTransferRejectionCauseWrapper__factory;
  }
  static readonly contractName: "CommitmentBalanceTransferRejectionCauseWrapper";
  public readonly contractName: "CommitmentBalanceTransferRejectionCauseWrapper";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CommitmentBalanceTransferRejectionCauseWrapperInterface {
    return new utils.Interface(
      _abi
    ) as CommitmentBalanceTransferRejectionCauseWrapperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CommitmentBalanceTransferRejectionCauseWrapper {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as CommitmentBalanceTransferRejectionCauseWrapper;
  }
}
