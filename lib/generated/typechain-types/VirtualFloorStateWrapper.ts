/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface VirtualFloorStateWrapperInterface extends utils.Interface {
  contractName: "VirtualFloorStateWrapper";
  functions: {
    "CancelledFlagged()": FunctionFragment;
    "CancelledResolvedNoWinners()": FunctionFragment;
    "CancelledUnresolvable()": FunctionFragment;
    "ClosedPreResolvable()": FunctionFragment;
    "ClosedResolvable()": FunctionFragment;
    "ClosedUnresolvable()": FunctionFragment;
    "None()": FunctionFragment;
    "ResolvedWinners()": FunctionFragment;
    "Running()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CancelledFlagged",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CancelledResolvedNoWinners",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CancelledUnresolvable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ClosedPreResolvable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ClosedResolvable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ClosedUnresolvable",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "None", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ResolvedWinners",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "Running", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "CancelledFlagged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CancelledResolvedNoWinners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CancelledUnresolvable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ClosedPreResolvable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ClosedResolvable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ClosedUnresolvable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "None", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ResolvedWinners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Running", data: BytesLike): Result;

  events: {};
}

export interface VirtualFloorStateWrapper extends BaseContract {
  contractName: "VirtualFloorStateWrapper";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VirtualFloorStateWrapperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CancelledFlagged(overrides?: CallOverrides): Promise<[number]>;

    CancelledResolvedNoWinners(overrides?: CallOverrides): Promise<[number]>;

    CancelledUnresolvable(overrides?: CallOverrides): Promise<[number]>;

    ClosedPreResolvable(overrides?: CallOverrides): Promise<[number]>;

    ClosedResolvable(overrides?: CallOverrides): Promise<[number]>;

    ClosedUnresolvable(overrides?: CallOverrides): Promise<[number]>;

    None(overrides?: CallOverrides): Promise<[number]>;

    ResolvedWinners(overrides?: CallOverrides): Promise<[number]>;

    Running(overrides?: CallOverrides): Promise<[number]>;
  };

  CancelledFlagged(overrides?: CallOverrides): Promise<number>;

  CancelledResolvedNoWinners(overrides?: CallOverrides): Promise<number>;

  CancelledUnresolvable(overrides?: CallOverrides): Promise<number>;

  ClosedPreResolvable(overrides?: CallOverrides): Promise<number>;

  ClosedResolvable(overrides?: CallOverrides): Promise<number>;

  ClosedUnresolvable(overrides?: CallOverrides): Promise<number>;

  None(overrides?: CallOverrides): Promise<number>;

  ResolvedWinners(overrides?: CallOverrides): Promise<number>;

  Running(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    CancelledFlagged(overrides?: CallOverrides): Promise<number>;

    CancelledResolvedNoWinners(overrides?: CallOverrides): Promise<number>;

    CancelledUnresolvable(overrides?: CallOverrides): Promise<number>;

    ClosedPreResolvable(overrides?: CallOverrides): Promise<number>;

    ClosedResolvable(overrides?: CallOverrides): Promise<number>;

    ClosedUnresolvable(overrides?: CallOverrides): Promise<number>;

    None(overrides?: CallOverrides): Promise<number>;

    ResolvedWinners(overrides?: CallOverrides): Promise<number>;

    Running(overrides?: CallOverrides): Promise<number>;
  };

  filters: {};

  estimateGas: {
    CancelledFlagged(overrides?: CallOverrides): Promise<BigNumber>;

    CancelledResolvedNoWinners(overrides?: CallOverrides): Promise<BigNumber>;

    CancelledUnresolvable(overrides?: CallOverrides): Promise<BigNumber>;

    ClosedPreResolvable(overrides?: CallOverrides): Promise<BigNumber>;

    ClosedResolvable(overrides?: CallOverrides): Promise<BigNumber>;

    ClosedUnresolvable(overrides?: CallOverrides): Promise<BigNumber>;

    None(overrides?: CallOverrides): Promise<BigNumber>;

    ResolvedWinners(overrides?: CallOverrides): Promise<BigNumber>;

    Running(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    CancelledFlagged(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CancelledResolvedNoWinners(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CancelledUnresolvable(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ClosedPreResolvable(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ClosedResolvable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ClosedUnresolvable(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    None(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ResolvedWinners(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Running(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
